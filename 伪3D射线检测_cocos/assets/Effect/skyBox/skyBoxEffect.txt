CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        color:        { value: [0.5, 0.5, 0.5, 0.5], inspector: { type: color } }
        tilingOffset: { value: [1, 0, 1, 0] } // 瓷砖(平铺)偏移
        multiplier:   { value: 0.5 } // 乘数
        mainTexture:  { value: grey         } // 主纹理
        detailTex:    { value: grey         } // 细节纹理
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%
//////////////////////////////////////////////// 顶点shader
CCProgram unlit-vs %{
  precision mediump float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>

  #if USE_VERTEX_COLOR // 勾选顶点颜色时启用
    in vec4 a_color;
    out vec4 v_color;
  #endif

  #if USE_TEXTURE // 勾选纹理时启用
    in vec2 a_texCoord; // 输入 纹理坐标
    out vec4 v_uv;
    out float mul; // 乘
    uniform TexCoords {
      vec4 tilingOffset; // 瓷砖(平铺)偏移
      float multiplier; // 乘数
    };
  #endif

  highp vec4 vert () {
    vec4 position;
    CCVertInput(position);

    highp mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    highp vec4 pos = cc_matProj * (cc_matView * matWorld) * position;

    #if USE_TEXTURE
      v_uv.xy = a_texCoord;
      v_uv.zw = a_texCoord;
      #if FLIP_UV
        v_uv.y = 1.0 - v_uv.y;
        v_uv.w = 1.0 - v_uv.w;
      #endif
      v_uv.xy += fract(tilingOffset.xy * cc_time.x);
      v_uv.zw += fract(tilingOffset.zw * cc_time.x);
      mul = multiplier;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    return pos;
  }
}%
//////////////////////////////////////////////////////////// fs
CCProgram unlit-fs %{
  precision mediump float;
  #include <output>

  #if USE_TEXTURE
    in vec4 v_uv;
    in float mul;
    uniform sampler2D mainTexture;
    uniform sampler2D detailTex;
  #endif

  #if USE_COLOR
    uniform Constant {
      vec4 color;
    };
  #endif

  #if USE_VERTEX_COLOR
    in vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= texture(mainTexture, v_uv.xy) * texture(detailTex, v_uv.zw);
    #endif

    #if USE_COLOR
      o *= color * mul;
    #endif

    #if USE_VERTEX_COLOR
      o *= v_color;
    #endif

    return CCFragOutput(o);
  }
}%